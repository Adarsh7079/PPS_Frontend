import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { _PdfName, _PdfReference, _stringToBytes } from '@syncfusion/ej2-pdf';
/**
 * ImageStructureBase
 *
 * @hidden
 */
var ImageStructureBase = /** @class */ (function () {
    function ImageStructureBase(stream, fontDictionary) {
        this.m_isImageStreamParsed = false;
        this.m_isImageInterpolated = false;
        this.isDualFilter = false;
        this.numberOfComponents = 0;
        if (!isNullOrUndefined(fontDictionary)) {
            this.m_imageStream = stream;
            this.m_imageDictionary = fontDictionary;
        }
    }
    /**
     * @private
     *
     */
    ImageStructureBase.prototype.getImageStream = function () {
        this.m_isImageStreamParsed = true;
        var IsDecodeFilterDefined = true;
        var ImageDictionary = this.m_imageDictionary;
        this.getImageInterpolation(ImageDictionary);
        var imageFilter = this.setImageFilter();
        var imageUnit8Array = this.imageStream();
        if (isNullOrUndefined(imageFilter)) {
            this.m_imageFilter.push("FlateDecode");
            IsDecodeFilterDefined = false;
        }
        if (!isNullOrUndefined(imageFilter)) {
            for (var i = 0; i < imageFilter.length; i++) {
                if (imageFilter.length > 1) {
                    this.isDualFilter = true;
                }
                switch (imageFilter[parseInt(i.toString(), 10)]) {
                    case "DCTDecode": {
                        if (!this.m_imageDictionary.has("SMask") && !this.m_imageDictionary.has("Mask")) {
                            var colorSpace = this.setColorSpace();
                            if (colorSpace.name === "DeviceCMYK" || colorSpace.name === "DeviceN" || colorSpace.name === "DeviceGray" || colorSpace.name === "Separation" || colorSpace.name === "DeviceRGB" || (colorSpace.name === "ICCBased" && this.numberOfComponents === 4)) {
                                if (colorSpace.name === "DeviceRGB" && (this.m_imageDictionary.has("DecodeParms") || this.m_imageDictionary.has("Decode"))) {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            this.m_imageFilter = null;
            return imageUnit8Array;
        }
        return null;
    };
    ImageStructureBase.prototype.setColorSpace = function () {
        if (isNullOrUndefined(this.m_colorspace)) {
            this.getColorSpace();
            return this.m_colorspace;
        }
    };
    ImageStructureBase.prototype.getColorSpace = function () {
        if (this.m_imageDictionary.has("ColorSpace")) {
            var filter = [];
            this.internalColorSpace = "";
            var colorspaceDictionary = null;
            var value = null;
            var colorSpaceResources = null;
            if (this.m_imageDictionary.has("ColorSpace")) {
                var array = this.m_imageDictionary.getArray("ColorSpace");
                if (array && Array.isArray(array) && array.length > 0) {
                    value = this.m_imageDictionary.get("ColorSpace");
                }
            }
            if (this.m_imageDictionary._get("ColorSpace") instanceof _PdfReference) {
            }
            if (this.m_imageDictionary.get("ColorSpace") instanceof _PdfName) {
                this.m_colorspace = this.m_imageDictionary.get("ColorSpace");
            }
            if (!isNullOrUndefined(value) && !isNullOrUndefined(value[0])) {
            }
        }
    };
    ImageStructureBase.prototype.setImageFilter = function () {
        if (isNullOrUndefined(this.m_imageFilter)) {
            this.m_imageFilter = this.getImageFilter();
        }
        return this.m_imageFilter;
    };
    ImageStructureBase.prototype.getImageFilter = function () {
        var imageFilter = [];
        if (!isNullOrUndefined(this.m_imageDictionary)) {
            if (this.m_imageDictionary.has("Filter")) {
                if (this.m_imageDictionary.get("Filter") instanceof _PdfName) {
                    imageFilter.push(this.m_imageDictionary.get("Filter").name);
                }
                else if (this.m_imageDictionary._get("Filter") instanceof _PdfReference) {
                }
            }
        }
        return imageFilter;
    };
    ImageStructureBase.prototype.getImageInterpolation = function (imageDictionary) {
        if (!isNullOrUndefined(imageDictionary) && imageDictionary.has("Interpolate")) {
            this.m_isImageInterpolated = imageDictionary.get("Interpolate");
        }
    };
    ImageStructureBase.prototype.imageStream = function () {
        var content = _stringToBytes(this.m_imageStream.getString());
        return content;
    };
    return ImageStructureBase;
}());
export { ImageStructureBase };

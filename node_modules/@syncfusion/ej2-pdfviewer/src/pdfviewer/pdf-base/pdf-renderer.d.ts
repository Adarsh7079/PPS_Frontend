import { PageRenderer, FormFieldsBase, AnnotationRenderer, PdfRenderedFields, SignatureBase, BookmarkStyles, BookmarkDestination, BookmarkBase, AnnotBounds } from './index';
import { PdfDocument } from '@syncfusion/ej2-pdf';
import { PdfViewer, PdfViewerBase } from '../index';
import { Size } from '@syncfusion/ej2-drawings';
/**
 * PdfRenderer
 *
 * @hidden
 */
export declare class PdfRenderer {
    /**
     * @private
     **/
    loadedDocument: PdfDocument;
    private pageCount;
    /**
     * @private
     **/
    bookmarkStyles: BookmarkStyles[];
    /**
     * @private
     **/
    bookmarkCollection: BookmarkBase[];
    /**
     * @private
     **/
    pageRotationCollection: number[];
    /**
     * @private
     **/
    bookmarkDictionary: {
        [key: string]: BookmarkDestination;
    };
    renderer: PageRenderer;
    m_formFields: FormFieldsBase;
    m_Signature: SignatureBase;
    m_annotationRenderer: AnnotationRenderer;
    private annotationDetailCollection;
    pageSizes: {
        [key: string]: Size;
    };
    private m_zoomFactor;
    private m_isCompletePageSizeNotReceieved;
    m_hashID: string;
    private x;
    private y;
    private zoom;
    private id;
    private pageIndex;
    private scaleFactor;
    private static IsLinuxOS;
    private static IsWindowsOS;
    private restrictionList;
    private securityList;
    private _fallbackFontCollection;
    /**
     * @private
     */
    readonly PageCount: number;
    private m_referencePath;
    /**
     * @private
     */
    readonly ReferencePath: string;
    /**
     * @private
     */
    referencePath: string;
    /**
     * @private
     */
    /**
    * @private
    */
    ScaleFactor: number;
    /**
     * @private
     */
    /**
    * @private
    */
    FallbackFontCollection: {
        [key: string]: any;
    };
    private pdfViewer;
    private pdfViewerBase;
    private digitialByteArray;
    private loadedBase64String;
    private password;
    /**
     * @param {PdfViewer} pdfViewer - The PdfViewer.
     * @param {PdfViewerBase} pdfViewerBase - The PdfViewerBase.
     * @private
     */
    constructor(pdfViewer: PdfViewer, pdfViewerBase: PdfViewerBase);
    /**
     * @private
     */
    load(documentData: string, documentId: string, password: string, jsonObject: any): string;
    /**
     * @private
     */
    loadDocument(documentData: string, documentId: string, password: string, jsonObject: any): object;
    private documentSecurity;
    private restrictionSummary;
    private getPermissionArray;
    private getPageSizes;
    private getPageSize;
    private convertPointToPixel;
    private convertPixelToPoint;
    /**
     * @private
     */
    getDocumentAsBase64(jsonObject: {
        [key: string]: string;
    }): string;
    /**
     * @private
     */
    importAnnotations(jsonObject: any): any;
    private removeAnnotationsFromCollection;
    /**
     * @private
     */
    exportAnnotation(jsonObject: {
        [key: string]: string;
    }, isObject: boolean): string;
    private changeFileExtension;
    private orderAnnotations;
    /**
     * @private
     */
    getAnnotationComments(jsonObject: any): any;
    /**
     * @private
     */
    getBookmarks(jsonObject: any): any;
    private retrieveFontStyles;
    private getPdfTextStyleString;
    private getChildrenStyles;
    private getChildrenBookmark;
    /**
     * @private
     */
    getHyperlinks(pageIndex: number): any;
    private exportHyperlinks;
    private getHyperlinkBounds;
    /**
     * @private
     */
    exportFormFields(jsonObject: any, isObjects: boolean): string;
    /**
     * @private
     */
    importFormFields(jsonObject: any): {
        PdfRenderedFormFields: PdfRenderedFields[];
    };
    private isUint8Array;
    private isBase64;
    private exportDataFormat;
    private fileFormat;
    exportAsImage(pageIndex: number): Promise<string>;
    exportAsImages(startIndex: number, endIndex: number): Promise<string[]>;
    private pdfiumExportAsImage;
    private pdfiumExportAsImages;
    extractText(pageIndex: number, isLayout?: boolean): Promise<{
        textDataCollection: TextData[];
        extractedText: string;
    }>;
    private textExtraction;
    extractTextWithPageSize(pageIndex: number): Promise<{
        [key: number]: PageTextData;
    }>;
    private extractTextDetailsWithPageSize;
    /**
     * @private
     */
    getDocumentText(jsonObject: any): Promise<any>;
}
declare class TextData {
    Text: string;
    Bounds: AnnotBounds;
    constructor(text: string, bounds: AnnotBounds);
}
declare class PageTextData {
    PageSize: SizeBase;
    TextData: TextData[];
    PageText: string;
    constructor(pageSize: SizeBase, textData: TextData[], pageText: string);
}
/**
 *
 * @hidden
 */
export declare class SizeBase {
    Width: number;
    Height: number;
    IsEmpty: boolean;
    constructor(_Width: number, _Height: number);
}
/**
 *
 * @hidden
 */
export declare class Annotations {
    textMarkupAnnotation: any;
    shapeAnnotation: any;
    measureShapeAnnotation: any;
    stampAnnotations: any;
    stickyNotesAnnotation: any;
    freeTextAnnotation: any;
    signatureAnnotation: any;
    signatureInkAnnotation: any;
    annotationOrder: any;
}
export {};

import { isNullOrUndefined } from '@syncfusion/ej2-base';
import { AnnotationRenderer, ShapeAnnotationBase, MeasureShapeAnnotationBase, ImageStructureBase } from './index';
import { PdfRotationAngle, PdfSquareAnnotation, PdfAnnotationFlag, PdfPopupAnnotation, PdfFreeTextAnnotation, PdfRubberStampAnnotation, PdfTextMarkupAnnotation, PdfInkAnnotation, PdfLineAnnotation, PdfRectangleAnnotation, PdfCircleAnnotation, PdfEllipseAnnotation, PdfPolygonAnnotation, PdfPolyLineAnnotation, PdfAngleMeasurementAnnotation, PdfAnnotationState, PdfAnnotationStateModel, _ContentParser, _stringToBytes, _encode } from '@syncfusion/ej2-pdf';
import { Rect } from '@syncfusion/ej2-drawings';
/**
 * PageRenderer
 *
 * @hidden
 */
var PageRenderer = /** @class */ (function () {
    /**
     * @param {PdfViewer} pdfViewer - The PdfViewer.
     * @param {PdfViewerBase} pdfViewerBase - The PdfViewerBase.
     * @private
     */
    function PageRenderer(pdfViewer, pdfViewerBase) {
        /**
         * @private
         */
        this.shapeAnnotationList = [];
        /**
         * @private
         */
        this.textMarkupAnnotationList = [];
        /**
         * @private
         */
        this.measureAnnotationList = [];
        /**
         * @private
         */
        this.stickyAnnotationList = [];
        /**
         * @private
         */
        this.rubberStampAnnotationList = [];
        /**
         * @private
         */
        this.freeTextAnnotationList = [];
        /**
         * @private
         */
        this.signatureAnnotationList = [];
        /**
         * @private
         */
        this.signatureInkAnnotationList = [];
        /**
         * @private
         */
        this.annotationOrder = [];
        /**
         * @private
         */
        this.hyperlinks = [];
        /**
         * @private
         */
        this.imageData = '';
        /**
         * @private
         */
        this.isMaskedImage = false;
        /**
         * @private
         */
        this.hyperlinkBounds = [];
        /**
         * @private
         */
        this.annotationDestPage = [];
        /**
         * @private
         */
        this.annotationList = [];
        /**
         * @private
         */
        this.annotationYPosition = [];
        /**
         * @private
         */
        this.digitalSignaturePresent = false;
        this.annotationCount = 0;
        /**
         * @private
         */
        this.isAnnotationPresent = false;
        /**
         *
         * @private
         */
        this.htmldata = [];
        /**
         *
         * @private
         */
        this.renderingMode = 0;
        this.textString = "";
        this.baseFont = "";
        this.fontSize = 0;
        this.pdfViewer = pdfViewer;
        this.pdfViewerBase = pdfViewerBase;
    }
    /**
     * @param {number} pageNumber
     * @param {Size} pageSize
     * @private
     */
    PageRenderer.prototype.exportAnnotationComments = function (pageNumber, pageSize) {
        var page = this.pdfViewer.pdfRendererModule.loadedDocument.getPage(parseInt(pageNumber.toString(), 10));
        var pageRotation = page.rotation;
        return this.getAnnotationFromPDF(pageSize.height, pageSize.width, pageNumber, pageRotation);
    };
    PageRenderer.prototype.IsStampExist = function (subject) {
        switch (subject.trim()) {
            case "Approved":
            case "Not Approved":
            case "Confidential":
            case "Draft":
            case "Final":
            case "Completed":
            case "For Public Release":
            case "Not For Public Release":
            case "For Comment":
            case "Void":
            case "Preliminary Results":
            case "Information Only":
            case "Witness":
            case "Initial Here":
            case "Sign Here":
            case "Accepted":
            case "Rejected":
            case "Revised":
            case "Reviewed":
            case "Received":
                return true;
            default:
                return false;
        }
    };
    PageRenderer.prototype.getAnnotationFromPDF = function (height, width, pageNumber, pageRotation) {
        var loadedPage = this.pdfViewer.pdfRendererModule.loadedDocument.getPage(parseInt(pageNumber.toString(), 10));
        var annotRenderer = new AnnotationRenderer(this.pdfViewer, this.pdfViewerBase);
        var textLabelCollection = [];
        var loadedFreetextAnnotations = [];
        this.isAnnotationPresent = false;
        if (loadedPage != null) {
            loadedFreetextAnnotations = this.getAllFreeTextAnnotations(loadedPage.annotations);
            this.annotationCount = 0;
            if (loadedPage.annotations != null && loadedPage.annotations.count > 0) {
                this.isAnnotationPresent = true;
                var _loop_1 = function (i) {
                    var annotation = loadedPage.annotations.at(i);
                    if (annotation instanceof PdfTextMarkupAnnotation) {
                        // eslint-disable-next-line max-len
                        var textMarkup = annotRenderer.loadTextMarkupAnnotation(annotation, height, width, pageRotation, loadedPage);
                        this_1.textMarkupAnnotationList[this_1.textMarkupAnnotationList.length] = textMarkup;
                        this_1.annotationOrder[this_1.annotationOrder.length] = textMarkup;
                        var name_1 = this_1.textMarkupAnnotationList[this_1.textMarkupAnnotationList.length - 1].AnnotName;
                        if (isNullOrUndefined(name_1) || name_1 === '') {
                            // eslint-disable-next-line max-len
                            this_1.textMarkupAnnotationList[this_1.textMarkupAnnotationList.length - 1].AnnotName = this_1.setAnnotationName(pageNumber);
                        }
                    }
                    else if (annotation instanceof PdfLineAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadLineAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        var name_2 = shapes.AnnotName;
                        if (isNullOrUndefined(name_2) || name_2 === '') {
                            shapes.AnnotName = this_1.setAnnotationName(pageNumber);
                        }
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    else if (annotation instanceof PdfSquareAnnotation || annotation instanceof PdfRectangleAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadSquareAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        var name_3 = shapes.AnnotName;
                        if (isNullOrUndefined(name_3) || name_3 === '') {
                            shapes.AnnotName = this_1.setAnnotationName(pageNumber);
                        }
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    else if (annotation instanceof PdfRectangleAnnotation) {
                        //rectangle annotation
                    }
                    else if (annotation instanceof PdfCircleAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadEllipseAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    else if (annotation instanceof PdfEllipseAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadEllipseAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    else if (annotation instanceof PdfPolygonAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadPolygonAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        var name_4 = shapes.AnnotName;
                        if (isNullOrUndefined(name_4) || name_4 === '') {
                            shapes.AnnotName = this_1.setAnnotationName(pageNumber);
                        }
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    else if (annotation instanceof PdfPolyLineAnnotation || annotation instanceof PdfAngleMeasurementAnnotation) {
                        // eslint-disable-next-line max-len
                        var shapeLabel = this_1.getShapeFreeText(annotation.name, loadedFreetextAnnotations);
                        if (!isNullOrUndefined(shapeLabel)) {
                            textLabelCollection.push(shapeLabel.name);
                        }
                        // eslint-disable-next-line max-len
                        var shapes = annotRenderer.loadPolylineAnnotation(annotation, height, width, pageRotation, shapeLabel);
                        var name_5 = shapes.AnnotName;
                        if (isNullOrUndefined(name_5) || name_5 === '') {
                            shapes.AnnotName = this_1.setAnnotationName(pageNumber);
                        }
                        if (!isNullOrUndefined(shapes)) {
                            if (shapes instanceof MeasureShapeAnnotationBase) {
                                this_1.measureAnnotationList[this_1.measureAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                            else if (shapes instanceof ShapeAnnotationBase) {
                                this_1.shapeAnnotationList[this_1.shapeAnnotationList.length] = shapes;
                                this_1.annotationOrder[this_1.annotationOrder.length] = shapes;
                            }
                        }
                    }
                    if (annotation instanceof PdfRubberStampAnnotation) {
                        this_1.htmldata = [];
                        var stampAnnotation = annotation;
                        if (stampAnnotation._dictionary.has('T') && this_1.checkName(stampAnnotation)) {
                            this_1.signatureAnnotationList.push(annotRenderer.loadSignatureImage(stampAnnotation, pageNumber));
                        }
                        else if (stampAnnotation._dictionary.has("M")) {
                            var rubberStampAnnotation = new StampAnnotationBase();
                            rubberStampAnnotation.Author = stampAnnotation.author;
                            rubberStampAnnotation.Subject = stampAnnotation.subject;
                            rubberStampAnnotation.AnnotName = stampAnnotation.name;
                            if (rubberStampAnnotation.AnnotName === '' || rubberStampAnnotation.AnnotName === null) {
                                rubberStampAnnotation.AnnotName = this_1.setAnnotationName(pageNumber);
                            }
                            if (annotation._dictionary.has("rotateAngle")) {
                                var rotateAngle = annotation._dictionary.get("rotateAngle");
                                if (rotateAngle !== undefined) {
                                    // The rotateAngle will get as 1, 2 and 3 To save in RotateAngle multiplying with 90.
                                    rubberStampAnnotation.RotateAngle = parseInt(rotateAngle[0]) * 90;
                                }
                            }
                            else {
                                // If the rotate angle is not specified in the annotation dictionary, then calculate it based on the page rotation.
                                rubberStampAnnotation.RotateAngle = 360 - (Math.abs(stampAnnotation.rotate * 90) - (pageRotation * 90));
                                var rubberStampAnnotationAngle = rubberStampAnnotation.RotateAngle;
                                if (rubberStampAnnotation.RotateAngle > 360) {
                                    rubberStampAnnotation.RotateAngle = rubberStampAnnotationAngle - 360;
                                }
                            }
                            if (rubberStampAnnotation.RotateAngle != 0) {
                                var bounds = this_1.getRubberStampBounds(stampAnnotation._innerTemplateBounds, stampAnnotation.bounds, height, width, pageRotation);
                                rubberStampAnnotation.Rect = bounds;
                            }
                            else {
                                rubberStampAnnotation.Rect = this_1.getBounds(stampAnnotation.bounds, height, width, pageRotation);
                            }
                            if (rubberStampAnnotation.Rect.y) {
                                var cropRect = new Rect(rubberStampAnnotation.Rect.x, loadedPage.cropBox[1] + rubberStampAnnotation.Rect.y, rubberStampAnnotation.Rect.width, rubberStampAnnotation.Rect.height);
                                rubberStampAnnotation.Rect = this_1.getBounds(cropRect, height, width, pageRotation);
                            }
                            rubberStampAnnotation.Icon = stampAnnotation.icon;
                            rubberStampAnnotation.ModifiedDate = stampAnnotation.modifiedDate.toString();
                            rubberStampAnnotation.Opacity = stampAnnotation.opacity;
                            rubberStampAnnotation.pageNumber = pageNumber;
                            var dictionary = annotation._dictionary.get('AP');
                            this_1.pdfViewerBase.pngData.push(stampAnnotation);
                            rubberStampAnnotation.IsDynamic = false;
                            rubberStampAnnotation.AnnotType = 'stamp';
                            if (stampAnnotation._dictionary.hasOwnProperty("iconName")) {
                                rubberStampAnnotation.IconName = stampAnnotation.getValues("iconName")[0];
                            }
                            else if (stampAnnotation.subject !== null) {
                                rubberStampAnnotation.IconName = stampAnnotation.subject;
                            }
                            else {
                                rubberStampAnnotation.IconName = "";
                            }
                            if (stampAnnotation.flags === PdfAnnotationFlag.readOnly) {
                                rubberStampAnnotation.IsCommentLock = true;
                            }
                            else {
                                rubberStampAnnotation.IsCommentLock = false;
                            }
                            if (stampAnnotation.flags === PdfAnnotationFlag.locked) {
                                rubberStampAnnotation.IsLocked = true;
                            }
                            else {
                                rubberStampAnnotation.IsLocked = false;
                            }
                            if (!isNullOrUndefined(stampAnnotation.reviewHistory)) {
                                for (var i_1 = 0; i_1 < stampAnnotation.reviewHistory.count; i_1++) {
                                    rubberStampAnnotation.State = this_1.getStateString(stampAnnotation.reviewHistory.at(parseInt(i_1.toString(), 10)).state);
                                    rubberStampAnnotation.StateModel = this_1.getStateModelString(stampAnnotation.reviewHistory.at(parseInt(i_1.toString(), 10)).stateModel);
                                }
                            }
                            if (rubberStampAnnotation.State == null || rubberStampAnnotation.StateModel == null) {
                                rubberStampAnnotation.State = "Unmarked";
                                rubberStampAnnotation.StateModel = "None";
                            }
                            rubberStampAnnotation.Comments = new Array();
                            for (var i_2 = 0; i_2 < stampAnnotation.comments.count; i_2++) {
                                var annot = annotRenderer.loadPopupAnnotation(stampAnnotation.comments.at(i_2), height, width, pageRotation);
                                rubberStampAnnotation.Comments.push(annot);
                            }
                            if (annotation._dictionary.has('Name')) {
                                rubberStampAnnotation.Name = annotation._dictionary.get('Name');
                                if (annotation._dictionary.get('Name').name.includes("#23D") || annotation._dictionary.get('Name').name.includes("#D")) {
                                    rubberStampAnnotation.IsDynamic = true;
                                }
                                if (!isNullOrUndefined(rubberStampAnnotation.Subject) && !(this_1.IsStampExist(rubberStampAnnotation.Subject))) {
                                    rubberStampAnnotation.Subject = stampAnnotation.icon.toString();
                                }
                            }
                            if (isNullOrUndefined(dictionary)) {
                                var pdfReference = annotation._dictionary.get('AP');
                                if (!isNullOrUndefined(pdfReference) && !isNullOrUndefined(pdfReference.dictionary) && (pdfReference.dictionary.has('N'))) {
                                    var ap_dictionary = pdfReference.dictionary;
                                    if (!isNullOrUndefined(ap_dictionary)) {
                                        this_1.findStampImage(annotation);
                                    }
                                }
                            }
                            else if (dictionary.has('N')) {
                                this_1.findStampImage(annotation);
                            }
                            rubberStampAnnotation.IsMaskedImage = this_1.isMaskedImage;
                            rubberStampAnnotation.Apperarance = this_1.htmldata;
                            if (stampAnnotation._dictionary.has('CustomData')) {
                                var customData = stampAnnotation._dictionary.get('CustomData');
                                if (!(!isNullOrUndefined(customData) && customData.trim())) {
                                    var ExistingCustomData = dictionary.get('CustomData');
                                    if (ExistingCustomData) {
                                        rubberStampAnnotation.CustomData = ExistingCustomData;
                                    }
                                }
                            }
                            this_1.rubberStampAnnotationList.push(rubberStampAnnotation);
                            this_1.annotationOrder.push(rubberStampAnnotation);
                        }
                    }
                    if (annotation instanceof PdfPopupAnnotation) {
                        if (!annotation._dictionary.has("IRT")) {
                            var stickyNote = annotRenderer.loadPopupAnnotation(annotation, height, width, pageRotation);
                            this_1.stickyAnnotationList[this_1.stickyAnnotationList.length] = stickyNote;
                            this_1.annotationOrder[this_1.annotationOrder.length] = stickyNote;
                            var name_6 = stickyNote.AnnotName;
                            if (isNullOrUndefined(name_6) || name_6 === '') {
                                stickyNote.AnnotName = this_1.setAnnotationName(pageNumber);
                            }
                        }
                    }
                    if (annotation instanceof PdfFreeTextAnnotation) {
                        var freeTextAnnot_1 = annotation;
                        var isFreeTextAnnotation = this_1.isFreeTextAnnotationType(freeTextAnnot_1);
                        if (isFreeTextAnnotation) {
                            var isShapeLabelAnnot = textLabelCollection.some(function (s) { return s === freeTextAnnot_1.name; });
                            var freeText = annotRenderer.loadFreeTextAnnotation(freeTextAnnot_1, height, width, pageRotation, loadedPage);
                            if (!isShapeLabelAnnot) {
                                this_1.freeTextAnnotationList[this_1.freeTextAnnotationList.length] = freeText;
                                this_1.annotationOrder[this_1.annotationOrder.length] = freeText;
                            }
                        }
                        else {
                            var freeText = annotRenderer.loadSignatureText(freeTextAnnot_1, pageNumber, height, width, pageRotation);
                            if (!freeTextAnnot_1._dictionary.has('T')) {
                                this_1.signatureAnnotationList[this_1.signatureAnnotationList.length] = freeText;
                                this_1.annotationOrder[this_1.annotationOrder.length] = freeText;
                            }
                        }
                    }
                    if (annotation instanceof PdfInkAnnotation) {
                        var inkAnnotation = annotation;
                        var signatureData = annotRenderer.loadSignature(inkAnnotation, height, width, pageRotation, pageNumber, loadedPage);
                        var inkSignatureData = annotRenderer.loadInkAnnotation(inkAnnotation, height, width, pageRotation, pageNumber, loadedPage);
                        if (!inkAnnotation._dictionary.has("T")) {
                            this_1.signatureAnnotationList.push(signatureData);
                            this_1.annotationOrder.push(signatureData);
                        }
                        else if (inkAnnotation._dictionary.has("NM")) {
                            this_1.signatureInkAnnotationList.push(inkSignatureData);
                            this_1.annotationOrder.push(inkSignatureData);
                        }
                        else if (inkAnnotation._dictionary.has("T")) {
                            if (inkAnnotation._dictionary.has("annotationSignature")) {
                                var canAdd = true;
                                canAdd = inkAnnotation.getValues("annotationSignature").length > 0 ? false : true;
                                if (canAdd) {
                                    this_1.signatureAnnotationList.push(signatureData);
                                    this_1.annotationOrder.push(signatureData);
                                }
                            }
                        }
                        if (!inkAnnotation._dictionary.has('NM') && !inkAnnotation._dictionary.has("annotationSignature")) {
                            this_1.signatureAnnotationList.push(signatureData);
                            this_1.annotationOrder.push(signatureData);
                        }
                    }
                };
                var this_1 = this;
                for (var i = 0; i < loadedPage.annotations.count; i++) {
                    _loop_1(i);
                }
            }
        }
        return { shapeAnnotation: this.shapeAnnotationList, textMarkupAnnotation: this.textMarkupAnnotationList,
            measureShapeAnnotation: this.measureAnnotationList, stampAnnotations: this.rubberStampAnnotationList,
            stickyNotesAnnotation: this.stickyAnnotationList, freeTextAnnotation: this.freeTextAnnotationList,
            signatureAnnotation: this.signatureAnnotationList, signatureInkAnnotation: this.signatureInkAnnotationList,
            annotationOrder: this.annotationOrder };
    };
    /**
     * @private
     * @param annotation
     */
    PageRenderer.prototype.findStampImage = function (annotation) {
        var stream = annotation._dictionary.get("AP").get("N");
        if (!isNullOrUndefined(stream)) {
            var appearance = stream;
            var data = appearance.getString();
            var content = _stringToBytes(data, true);
            var parser = new _ContentParser(content);
            var result = parser._readContent();
            this.stampAnnoattionRender(result, stream);
        }
    };
    PageRenderer.prototype.stampAnnoattionRender = function (recordCollection, dictionary) {
        if (!isNullOrUndefined(recordCollection)) {
            for (var i = 0; i < recordCollection.length; i++) {
                var element = recordCollection[parseInt(i.toString(), 10)]._operands;
                switch (recordCollection[parseInt(i.toString(), 10)]._operator) {
                    case "q": {
                        var Json = { restorecanvas: false };
                        this.htmldata.push(Json);
                        break;
                    }
                    case "Q": {
                        var Json = { restorecanvas: true };
                        this.htmldata.push(Json);
                        break;
                    }
                    case "Tr": {
                        this.renderingMode = parseInt(element[0]);
                        break;
                    }
                    case "TJ":
                    case "Tj": {
                        this.textString = recordCollection[parseInt(i.toString(), 10)]._operands[0];
                        var Json = { type: "string", text: this.textString, currentFontname: this.currentFont, baseFontName: this.baseFont, fontSize: this.fontSize };
                        this.htmldata.push(Json);
                        break;
                    }
                    case "'": {
                        this.textString = recordCollection[parseInt(i.toString(), 10)]._operands[0];
                        var Json = { type: "string", text: this.textString, currentFontname: this.currentFont, baseFontName: this.baseFont, fontSize: this.fontSize };
                        this.htmldata.push(Json);
                        break;
                    }
                    case "Tf": {
                        var j = 0;
                        for (j = 0; j < element.length; j++) {
                            if (element[parseInt(j.toString(), 10)].includes("/")) {
                                this.currentFont = element[parseInt(j.toString(), 10)].replace("/", "");
                                break;
                            }
                        }
                        this.fontSize = parseInt(element[j + 1]);
                        if (dictionary.dictionary.has("Resources")) {
                            var stdic = dictionary.dictionary.get("Resources");
                            if (!isNullOrUndefined(stdic)) {
                                var fontObject = stdic.get("Font");
                                if (!isNullOrUndefined(fontObject) && recordCollection[parseInt(i.toString(), 10)]._operator == "Tf") {
                                    var name_7 = element[0].replace("/", "");
                                    var refernceholder = fontObject.get(name_7);
                                    if (!isNullOrUndefined(refernceholder) && !isNullOrUndefined(refernceholder.dictionary)) {
                                        var sub = refernceholder.dictionary;
                                        this.baseFont = sub.get("BaseFont");
                                    }
                                }
                            }
                        }
                        break;
                    }
                    case "Do": {
                        if (dictionary.dictionary.has("Resources")) {
                            var stdic = dictionary.dictionary.get("Resources");
                            if (!isNullOrUndefined(stdic)) {
                                var xObject = stdic.get("XObject");
                                if (!isNullOrUndefined(xObject) && recordCollection[parseInt(i.toString(), 10)]._operator == "Do") {
                                    var name_8 = element[0].replace("/", "");
                                    if (xObject.has(name_8)) {
                                        var refernceholder = xObject.get(name_8);
                                        if (!isNullOrUndefined(refernceholder) && !isNullOrUndefined(refernceholder.dictionary)) {
                                            var sub = refernceholder;
                                            if (sub.dictionary.get("Subtype").name == "Image") {
                                                var imageStucture = new ImageStructureBase(sub, sub.dictionary);
                                                if (!isNullOrUndefined(imageStucture)) {
                                                    var imageStream = imageStucture.getImageStream();
                                                    var imageString = 'data:image/png;base64,' + _encode(imageStream);
                                                    var Json = { imagedata: imageString };
                                                    this.htmldata.push(Json);
                                                    this.Imagedata = imageString;
                                                }
                                            }
                                            else if (sub.dictionary.get("Subtype").name === "Form") {
                                                var appearance = sub;
                                                var data = appearance.getString();
                                                var content = _stringToBytes(data, true);
                                                var parser = new _ContentParser(content);
                                                var result = parser._readContent();
                                                this.stampAnnoattionRender(result, sub);
                                            }
                                            this.IsMaskedImage = false;
                                            if (sub.dictionary.get("SMask")) {
                                                this.IsMaskedImage = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
            }
        }
    };
    PageRenderer.prototype.getStateModelString = function (stateModel) {
        switch (stateModel) {
            case PdfAnnotationStateModel.review:
                return 'Review';
            case PdfAnnotationStateModel.marked:
                return 'Marked';
            case PdfAnnotationStateModel.none:
                return 'None';
            default:
                return 'None';
        }
    };
    PageRenderer.prototype.getStateString = function (state) {
        switch (state) {
            case PdfAnnotationState.accepted:
                return 'Accepted';
            case PdfAnnotationState.rejected:
                return 'Rejected';
            case PdfAnnotationState.cancel:
                return 'Cancelled';
            case PdfAnnotationState.completed:
                return 'Completed';
            case PdfAnnotationState.none:
                return 'None';
            case PdfAnnotationState.unmarked:
                return 'Unmarked';
            case PdfAnnotationState.marked:
                return 'Marked';
            case PdfAnnotationState.unknown:
                return 'Unknown';
            default:
                return null;
        }
    };
    PageRenderer.prototype.getBounds = function (bounds, pageWidth, pageHeight, pageRotation) {
        var bound;
        if (pageRotation === 0) {
            // eslint-disable-next-line max-len
            bound = new Rect(bounds.x, bounds.y, bounds.width, bounds.height);
        }
        else if (pageRotation === 1) {
            // eslint-disable-next-line max-len
            bound = new Rect(this.convertPixelToPoint(pageWidth - this.convertPointToPixel(bounds.y)) - this.convertPointToPixel(bounds.height), bounds.x, bounds.height, bounds.width);
        }
        else if (pageRotation === 2) {
            // eslint-disable-next-line max-len
            bound = new Rect(this.convertPixelToPoint(pageWidth - this.convertPointToPixel(bounds.x)) - this.convertPointToPixel(bounds.width), this.convertPixelToPoint(pageHeight - this.convertPointToPixel(bounds.y)) - this.convertPointToPixel(bounds.height), this.convertPointToPixel(bounds.width), bounds.height);
        }
        else if (pageRotation === 3) {
            // eslint-disable-next-line max-len
            bound = new Rect(bounds.y, this.convertPixelToPoint(pageHeight - this.convertPointToPixel(bounds.x)) - this.convertPointToPixel(bounds.width), bounds.height, bounds.width);
        }
        return bound;
    };
    PageRenderer.prototype.getRubberStampBounds = function (innerTemplateBounds, bounds, pageHeight, pageWidth, pageRotation) {
        var bound = new Rect();
        var centerPointX = 0;
        var centerPointY = 0;
        if (pageRotation === 0) {
            centerPointX = bounds.x + (bounds.width / 2);
            centerPointY = bounds.y + (bounds.height / 2);
            bound = new Rect(centerPointX - (innerTemplateBounds.width / 2), centerPointY - (innerTemplateBounds.height / 2), innerTemplateBounds.width, innerTemplateBounds.height);
        }
        else if (pageRotation === 1) {
            var boundsX = this.convertPixelToPoint(pageWidth - this.convertPointToPixel(bounds.Y) - this.convertPointToPixel(bounds.height));
            var boundsY = bounds.X;
            centerPointX = boundsX + (bounds.height / 2);
            centerPointY = boundsY + (bounds.width / 2);
            bound = new Rect(centerPointX - (innerTemplateBounds.width / 2), centerPointY - (innerTemplateBounds.height / 2), innerTemplateBounds.width, innerTemplateBounds.height);
        }
        else if (pageRotation === 2) {
            var boundsX = this.convertPixelToPoint(pageWidth - this.convertPointToPixel(bounds.X) - this.convertPointToPixel(bounds.width));
            var boundsY = this.convertPixelToPoint(pageHeight - this.convertPointToPixel(bounds.Y) - this.convertPointToPixel(bounds.height));
            centerPointX = boundsX + (bounds.width / 2);
            centerPointY = boundsY + (bounds.height / 2);
            bound = new Rect(centerPointX - (innerTemplateBounds.width / 2), centerPointY - (innerTemplateBounds.height / 2), innerTemplateBounds.width, innerTemplateBounds.height);
        }
        else if (pageRotation === 3) {
            var boundsX = bounds.Y;
            var boundsY = this.convertPixelToPoint(pageHeight - this.convertPointToPixel(bounds.X) - this.convertPointToPixel(bounds.width));
            centerPointX = boundsX + (bounds.height / 2);
            centerPointY = boundsY + (bounds.width / 2);
            bound = new Rect(centerPointX - (innerTemplateBounds.width / 2), centerPointY - (innerTemplateBounds.height / 2), innerTemplateBounds.width, innerTemplateBounds.height);
        }
        return bound;
    };
    PageRenderer.prototype.convertPixelToPoint = function (value) {
        return (value * 72 / 96);
    };
    PageRenderer.prototype.convertPointToPixel = function (value) {
        return (value * 96 / 72);
    };
    PageRenderer.prototype.getRotateAngleString = function (angle) {
        switch (angle) {
            case PdfRotationAngle.angle0:
                return 'RotateAngle0';
            case PdfRotationAngle.angle90:
                return 'RotateAngle90';
            case PdfRotationAngle.angle180:
                return 'RotateAngle180';
            case PdfRotationAngle.angle270:
                return 'RotateAngle270';
            default:
                return 'RotateAngle0';
        }
    };
    PageRenderer.prototype.checkName = function (stampAnnotation) {
        // Check if the stamp annotation has a "Name" key in its dictionary.
        if ("Name" in stampAnnotation._dictionary) {
            // Get the custom data for the "Name" key.
            var customData = stampAnnotation.getValues("Name");
            // Check if the custom data is not null and contains a '#' character.
            if (!(isNullOrUndefined(customData)) && customData.indexOf("#") > -1) {
                // The stamp annotation has a name that contains a '#' character.
                return true;
            }
        }
        // The stamp annotation does not have a name that contains a '#' character.
        return false;
    };
    PageRenderer.prototype.getAllFreeTextAnnotations = function (annotations) {
        var loadedFreetextAnnotations = [];
        for (var i = 0; i < annotations.count; i++) {
            var annotation = annotations.at(i);
            if (annotation instanceof PdfFreeTextAnnotation) {
                loadedFreetextAnnotations.push(annotation);
            }
        }
        return loadedFreetextAnnotations;
    };
    PageRenderer.prototype.getShapeFreeText = function (shapeName, loadedFreetextAnnotations) {
        if (!isNullOrUndefined(shapeName) && shapeName !== '') {
            return loadedFreetextAnnotations.find(function (annot) { return annot.name.includes(shapeName); });
        }
        return null;
    };
    PageRenderer.prototype.setAnnotationName = function (pageNumber) {
        var annotationName = pageNumber + this.annotationCount.toString();
        this.annotationCount++;
        return annotationName;
    };
    PageRenderer.prototype.isFreeTextAnnotationType = function (freeTextAnnot) {
        var isFreeTextAnnotation = true;
        if (freeTextAnnot._dictionary.has('AnnotationType')) {
            var annotType = freeTextAnnot.getValues('AnnotationType');
            if (!isNullOrUndefined(annotType) && annotType[0] === 'Signature') {
                isFreeTextAnnotation = false;
            }
        }
        return isFreeTextAnnotation;
    };
    return PageRenderer;
}());
export { PageRenderer };
/**
 *
 * @hidden
 */
var StampAnnotationBase = /** @class */ (function () {
    function StampAnnotationBase() {
    }
    return StampAnnotationBase;
}());
export { StampAnnotationBase };

import { _ExportHelper } from './xfdf-document';
import { PdfDocument } from './../pdf-document';
import { PdfAnnotation } from './../annotations/annotation';
import { _PdfDictionary } from './../pdf-primitives';
import { _PdfContentStream } from './../base-stream';
export declare class _JsonDocument extends _ExportHelper {
    constructor(fileName?: string);
    _exportAnnotations(document: PdfDocument): Uint8Array;
    _exportFormFields(document: PdfDocument): Uint8Array;
    _save(): Uint8Array;
    _writeFormFieldData(): void;
    _exportAnnotationData(document: PdfDocument, pageCount: number): void;
    _exportAnnotation(annotation: PdfAnnotation, index: number): void;
    _writeDictionary(dictionary: _PdfDictionary, pageIndex: number, hasAppearance: boolean): void;
    _writeColor(primitive: any, attribute: string, tag?: string): void;
    _writeAttributeString(attribute: string, primitive: any, isLowerCase?: boolean): void;
    _writeAttribute(key: string, primitive: any, dictionary: _PdfDictionary): void;
    _writeVertices(dictionary: _PdfDictionary): void;
    _writeInkList(dictionary: _PdfDictionary): void;
    _exportMeasureDictionary(dictionary: _PdfDictionary): void;
    _exportMeasureFormatDetails(key: string, measurementDetails: _PdfDictionary): void;
    _getAppearanceString(appearance: _PdfDictionary): Uint8Array;
    _writeAppearanceDictionary(table: Map<string, string>, dictionary: _PdfDictionary): void;
    _writeObject(table?: Map<string, string>, value?: any, dictionary?: _PdfDictionary, key?: string, array?: Map<string, string>[]): void;
    _writeTable(tableKey: string, value: string, table: Map<string, string>, key: string, array: Map<string, string>[]): void;
    _writeArray(array: Map<string, string>[], value: any[], dictionary: _PdfDictionary): void;
    _convertToJson(table: Map<string, string>): string;
    _convertToJsonArray(array: Map<string, string>[]): string;
    _parseJson(document: PdfDocument, data: Uint8Array): any;
    _importFormData(document: PdfDocument, data: Uint8Array): void;
    _importAnnotations(document: PdfDocument, data: Uint8Array): void;
    _addAnnotationData(dictionary: _PdfDictionary, annotation: any, annotationKeys: string[]): void;
    _addLinePoints(value: string, linePoints: number[]): void;
    _addString(dictionary: _PdfDictionary, key: string, value: string): void;
    _addBoolean(dictionary: _PdfDictionary, key: string, value: string): void;
    _addBorderStyle(key: string, value: any, borderEffectDictionary: _PdfDictionary, borderStyleDictionary: _PdfDictionary): void;
    _parseFloatPoints(value: string): number[];
    _addFloatPoints(dictionary: _PdfDictionary, key: string, value: number[]): void;
    _addMeasureDictionary(dictionary: _PdfDictionary, annotation: any, annotationKeys: string[]): void;
    _readDictionaryElements(elements: any): _PdfDictionary;
    _addStreamData(dictionary: _PdfDictionary, data: Map<string, string>, values: string): void;
    _addAppearanceData(dictionary: _PdfDictionary, data: string): void;
    _parseAppearance(element: any): any;
    _parseDictionary(element: any): _PdfDictionary;
    _parseStream(element: any): _PdfContentStream;
    _getValidString(value: string): string;
}

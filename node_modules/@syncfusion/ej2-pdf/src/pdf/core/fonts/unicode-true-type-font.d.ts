import { _TrueTypeReader, _TrueTypeMetrics } from './ttf-reader';
import { _PdfDictionary, Dictionary } from './../pdf-primitives';
import { _PdfFontMetrics } from './pdf-font-metrics';
import { _PdfStream } from './../base-stream';
export declare class _UnicodeTrueTypeFont {
    readonly _nameString: string;
    _subsetName: string;
    _fontSize: number;
    _fontString: string;
    _fontData: Uint8Array;
    _ttfReader: _TrueTypeReader;
    _ttfMetrics: _TrueTypeMetrics;
    _isEmbed: boolean;
    _fontDictionary: _PdfDictionary;
    _descendantFont: _PdfDictionary;
    _fontDescriptor: _PdfDictionary;
    _metrics: _PdfFontMetrics;
    _usedChars: Dictionary<string, string>;
    _isEmbedFont: boolean;
    _cmap: _PdfStream;
    _fontProgram: _PdfStream;
    _cmapPrefix: string;
    _cmapEndCodeSpaceRange: string;
    _cmapBeginRange: string;
    _cmapEndRange: string;
    _cmapSuffix: string;
    constructor(base64String: string, size: number);
    _beginSave(): void;
    _descendantFontBeginSave(): void;
    _fontDictionaryBeginSave(): void;
    _Initialize(): void;
    _createInternals(): void;
    _getInternals(): _PdfDictionary;
    _initializeMetrics(): void;
    _getFontName(): string;
    _createDescendantFont(): void;
    _createFontDescriptor(): _PdfDictionary;
    _generateFontProgram(): void;
    _getBoundBox(): number[];
    _cmapBeginSave(): void;
    _fontProgramBeginSave(): void;
    _toHexString(n: number, isCaseChange: boolean): string;
    _generateCmap(): void;
    _createFontDictionary(): void;
    _createSystemInfo(): _PdfDictionary;
    _getDescriptorFlags(): number;
    _getCharacterWidth(charCode: string): number;
    _setSymbols(text: string): void;
    _getDescendantWidth(): Array<any>;
}

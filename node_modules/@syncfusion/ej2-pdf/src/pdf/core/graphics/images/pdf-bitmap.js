var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { _ImageDecoder } from './../../graphics/images/image-decoder';
import { PdfImage } from './pdf-image';
import { _decode } from './../../utils';
/**
 * The 'PdfBitmap' contains methods and properties to handle the Bitmap images.
 * ```typescript
 * // Load an existing PDF document
 * let document: PdfDocument = new PdfDocument(data, password);
 * // Access first page
 * let page: PdfPage = document.getPage(0);
 * // Gets the graphics of the PDF page
 * let graphics: PdfGraphics = page.graphics;
 * // Create new image object by using JPEG image data as Base64 string format
 * let image: PdfImage = new PdfBitmap('/9j/4AAQSkZJRgABAQEAkACQAAD/4....QB//Z');
 * //Draw the image.
 * graphics.drawImage(image, 10, 20, 400, 400);
 * // Save the document
 * document.save('output.pdf');
 * // Destroy the document
 * document.destroy();
 * ```
 */
var PdfBitmap = /** @class */ (function (_super) {
    __extends(PdfBitmap, _super);
    function PdfBitmap(encodedString) {
        var _this = _super.call(this) || this;
        _this._imageStatus = true;
        if (encodedString !== null && typeof encodedString !== 'undefined' && typeof encodedString === 'string') {
            _this._initializeAsync(encodedString);
        }
        else {
            _this._initializeAsync(encodedString);
        }
        return _this;
    }
    PdfBitmap.prototype._initializeAsync = function (encodedString) {
        var byteArray = new Uint8Array(encodedString.length);
        if (encodedString !== null && typeof encodedString !== 'undefined' && typeof encodedString === 'string') {
            byteArray = _decode(encodedString, false);
        }
        else if (encodedString instanceof Uint8Array) {
            byteArray = encodedString;
        }
        this._decoder = new _ImageDecoder(byteArray);
        this.height = this._decoder._height;
        this.width = this._decoder._width;
        this._bitsPerComponent = this._decoder._bitsPerComponent;
    };
    PdfBitmap.prototype._save = function () {
        this._imageStatus = true;
        this._imageStream = this._decoder._getImageDictionary();
    };
    return PdfBitmap;
}(PdfImage));
export { PdfBitmap };

import { _PdfStream } from './../../base-stream';
import { _PdfDictionary } from './../../pdf-primitives';
import { _ImageFormat } from './../../enumerator';
export declare class _ImageDecoder {
    _stream: Uint8Array;
    _format: _ImageFormat;
    _height: number;
    _width: number;
    _bitsPerComponent: number;
    _imageData: Uint8Array;
    _imageStream: _PdfStream;
    _position: number;
    _noOfComponents: number;
    static _jpegHeader: number[];
    /**
     * Initializes a new instance of the `_ImageDecoder` class.
     *
     * @private
     * @param {Uint8Array} stream byte array.
     */
    constructor(stream: Uint8Array);
    readonly _imageDataAsNumberArray: ArrayBuffer;
    _initialize(): void;
    _reset(): void;
    _parseJpegImage(): void;
    _checkIfJpeg(): boolean;
    _read(buffer: Uint8Array, offset: number, count: number): void;
    _getBuffer(index: number): number;
    _getImageDictionary(): _PdfStream;
    _getColorSpace(): string;
    _getDecodeParams(): _PdfDictionary;
    _seek(length: number): void;
    _readByte(): number;
    _skipStream(): void;
    _readExceededJpegImage(): void;
    _toUnsigned16(value: number): number;
    _getMarker(): number;
}

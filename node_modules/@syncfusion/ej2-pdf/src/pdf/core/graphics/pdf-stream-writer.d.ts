import { _PdfContentStream } from './../base-stream';
import { _PdfTransformationMatrix } from './pdf-graphics';
import { _PdfName } from './../pdf-primitives';
export declare class _PdfStreamWriter {
    _stream: _PdfContentStream;
    _newLine: string;
    _whiteSpace: string;
    constructor(stream: _PdfContentStream);
    _writeOperator(value: string): void;
    _saveGraphicsState(): void;
    _restoreGraphicsState(): void;
    _writeComment(comment: string): void;
    _setGraphicsState(value: _PdfName): void;
    _modifyCtm(matrix: _PdfTransformationMatrix): void;
    _modifyTM(matrix: _PdfTransformationMatrix): void;
    _setColorSpace(value: string, forStroking: boolean): void;
    _setColor(color: number[], forStroking: boolean): void;
    _appendRectangle(x: number, y: number, width: number, height: number): void;
    _writePoint(x: number, y: number): void;
    _clipPath(isEvenOdd: boolean): void;
    _fillPath(isEvenOdd: boolean): void;
    _closeFillPath(isEvenOdd: boolean): void;
    _strokePath(): void;
    _closeStrokePath(): void;
    _fillStrokePath(isEvenOdd: boolean): void;
    _closeFillStrokePath(isEvenOdd: boolean): void;
    _endPath(): void;
    _setFont(name: string, size: number): void;
    _setTextScaling(textScaling: number): void;
    _closePath(): void;
    _startNextLine(): void;
    _startNextLine(x: number, y: number): void;
    _showText(text: string): void;
    _write(string: string): void;
    _writeText(text: string): void;
    _beginText(): void;
    _endText(): void;
    _beginPath(x: number, y: number): void;
    _appendLineSegment(x: number, y: number): void;
    _appendBezierSegment(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void;
    _setTextRenderingMode(renderingMode: number): void;
    _setCharacterSpacing(charSpacing: number): void;
    _setWordSpacing(wordSpacing: number): void;
    _showNextLineText(text: string): void;
    _showNextLineText(text: string, unicode: boolean): void;
    _setLineDashPattern(pattern: number[], patternOffset: number): void;
    _setMiterLimit(miterLimit: number): void;
    _setLineWidth(width: number): void;
    _setLineCap(lineCapStyle: number): void;
    _setLineJoin(lineJoinStyle: number): void;
    _executeObject(name: _PdfName): void;
    _beginMarkupSequence(name: string): void;
    _endMarkupSequence(): void;
    _clear(): void;
    _escapeSymbols(value: string): number[];
}
